#!/usr/bin/env python
"""
Create healpix coverage map
"""
__author__ = "Alex Drlica-Wagner"
import logging
import warnings
import os

import fitsio
import healpy as hp
from healpy import fitsfunc
import numpy as np
from matplotlib.colors import LogNorm
import pylab as plt
import pandas as pd

import astropy.wcs
import astropy.io.fits as pyfits
from astropy.coordinates import SkyCoord
import astropy.units as u

from healpixify import fileio

warnings.simplefilter('ignore',category=astropy.wcs.FITSFixedWarning)

def phi2lon(phi): return np.degrees(phi)
def lon2phi(lon): return np.radians(lon)

def theta2lat(theta): return 90. - np.degrees(theta)
def lat2theta(lat): return np.radians(90. - lat)

def pix2ang(nside, pix, nest=False):
    """
    Return (lon, lat) in degrees instead of (theta, phi) in radians
    """
    theta, phi =  hp.pix2ang(nside, pix, nest)
    lon = phi2lon(phi)
    lat = theta2lat(theta)
    return lon, lat

def ang2pix(nside, lon, lat, nest=False):
    """
    Input (lon, lat) in degrees instead of (theta, phi) in radians
    """
    theta = np.radians(90. - lat)
    phi = np.radians(lon)
    return hp.ang2pix(nside, theta, phi, nest)

def ang2vec(lon, lat):
    """
    Input (lon, lat) in degrees instead of (theta, phi) in radians
    """
    theta = lat2theta(lat)
    phi = lon2phi(lon)
    vec = hp.ang2vec(theta, phi)
    return vec

def ang2disc(nside, lon, lat, radius, inclusive=False, fact=4, nest=False):
    """
    Wrap `query_disc` to use lon, lat, and radius in degrees.
    """
    vec = ang2vec(lon,lat)
    return hp.query_disc(nside, vec, np.radians(radius), inclusive, fact, nest)

class Image(object):

    def __init__(self,filename,image_hdu='SCI',mask_hdu='MSK'):
        self.filename = filename
        self.image_hdu = image_hdu
        self.mask_hdu = mask_hdu
        self._readfile(filename)
        self._create_wcs()

    @property
    def corners(self):
        corners = []
        for i in range(1,5):
            corners.append( [self.header['RAC%i'%i],self.header['DECC%d'%i]] )
        return SkyCoord(np.array(corners),unit=u.deg,frame='icrs')

    @property
    def center(self):
        return SkyCoord(self.header['RA_CENT'],self.header['DEC_CENT'],unit=u.deg,frame='icrs')

    def _readfile(self,filename):
        self.fits = pyfits.open(filename)
        self.header = self.fits[self.image_hdu].header
        self.data = self.fits[self.mask_hdu].data

    def _create_wcs(self):
        self.wcs = astropy.wcs.WCS(self.header)

    def get_radius(self, epsilon=0.0):
        sep = self.center.separation(self.corners)
        return np.max(sep.deg)+epsilon
        
    def healpixify(self, nside=4096, nest=False):
        # Determine the radius of the image
        radius = self.get_radius(epsilon=0.01)
        center = self.center

        hpx = ang2disc(nside,center.ra.deg,center.dec.deg,radius,nest=nest)
        ra,dec = pix2ang(nside,hpx,nest=nest)

        xpix,ypix = self.wcs.wcs_world2pix(ra,dec,0)
        xpix,ypix = np.round([xpix,ypix]).astype(int)
        shape = self.data.shape
        sel = (xpix > 0) & (xpix < shape[1]) \
            & (ypix > 0) & (ypix < shape[0])
        xpix = xpix[sel]
        ypix = ypix[sel]

        return hpx[sel], self.data[ypix,xpix]

    def subpixify(self, nside=4096, subnside=4096*2**3, bitmap=2047, nest=True):
        subpix,subval = self.healpixify(subnside,nest=True)
        sample = (subnside//nside)**2
        pix = subpix//sample
        sel = (subval & bitmap) == 0

        pix = pix[sel]
        hpx, cts = np.unique(pix,return_counts=True)
        frac = cts/float(sample)
        return hpx, frac

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('filenames',nargs='+')
    parser.add_argument('-m','--mask-hdu', default='MSK',
                        help='mask hdu name')
    parser.add_argument('-i','--image-hdu', default='SCI',
                        help='image hdu name')
    parser.add_argument('-w','--weight-hdu', default='WGT',
                        help='weight hdu name')
    parser.add_argument('-n','--nside',default=4096,type=int,
                        help='output pixel nside')
    parser.add_argument('-s','--subnside',default=4096*2**3,type=int,
                        help='subpixel nside for coverage fraction')
    parser.add_argument('-b','--mask-bits',default=2047,type=int,
                        help='masked bits')
    parser.add_argument('-o','--outfile',default=None,
                        help='output file')
    parser.add_argument('-v','--verbose',action='store_true',
                        help='output verbosity')
    g = parser.add_mutually_exclusive_group()
    g.add_argument('--nest',action='store_true',
                   help='use nested pixel scheme')
    g.add_argument('--ring',action='store_true',
                   help='use ring pixel scheme')
    args = parser.parse_args()

    logging.basicConfig(format='%(message)s')
    if args.verbose: logging.getLogger().setLevel(logging.DEBUG)

    for f in args.filenames:
        logging.info("Loading image: %s"%os.path.basename(f))
        self = image = Image(f,image_hdu=args.image_hdu,mask_hdu=args.mask_hdu)
        logging.info("Healpixifying...")
        hpx,val = image.healpixify(args.nside)

    if args.outfile:
        fileio.write_partial_map(args.outfile,data={'PIXEL':hpx,'VALUE':val},
                          nside=args.nside)
    
        """
        plt.figure()
        x = np.arange(image.data.shape[0])
        y = np.arange(image.data.shape[-1])
        plt.pcolormesh(x,y,image.data,norm=LogNorm())

        corners = image.corners        
        x = np.linspace(corners.ra.deg.min(),corners.ra.deg.max(),200)
        y = np.linspace(corners.dec.deg.min(),corners.dec.deg.max(),200)
        xx,yy = np.meshgrid(x,y)

        import pandas as pd
        p = pd.DataFrame({'hpx':ang2pix(args.nside,xx,yy).flat})
        m = pd.DataFrame({'hpx':hpx,'val':val})
        vv = p.merge(m,'left','hpx')['val'].values.reshape(xx.shape)

        plt.figure()
        plt.pcolormesh(x,y,vv,norm=LogNorm())
        """

        #m = hp.UNSEEN*np.ones(hp.nside2npix(args.nside))
        #m[hpx] = val
        #
        #corners.ra.wrap_angle = 180*u.deg
        #hp.cartview(np.log10(m),
        #            lonra=[np.min(corners.ra.deg),np.max(corners.ra.deg)],
        #            latra=[np.min(corners.dec.deg),np.max(corners.dec.deg)]
        #            )
        
    logging.info("Done.")
